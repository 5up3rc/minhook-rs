initSidebarItems({"enum":[["Error","The error type for all hooking operations.MinHook error status codes map directly to this type."]],"fn":[["uninitialize","Uninitializes the minhook-rs library.SafetyThis function is unsafe because any live hooks might still depend on this library. After calling this function existing trampoline functions might point to uninitialized memory. Only use this function when you are absolutely sure no hook objects will be accessed after its use."]],"macro":[["static_hooks!","Declares one or more thread-safe static hooks.The syntax for these hooks is:"]],"mod":[["function","Module containing information about hookable functions.The traits in this module are automatically implemented and should generally not be implemented by users of this library."],["panic","Panic handling for panics caught at foreign code boundaries in detour functions."]],"struct":[["Hook","A hook that is destroyed when it goes out of scope."],["HookQueue","A queue of hook changes to be applied at once."],["StaticHook","A hook with a static lifetime.This hook can only be constructed using the `static_hooks!` macro. It has the form:Before accessing this hook it is **required** to call `initialize()` **once**. Accessing the hook before initializing or trying to initialize the hook twice (even after the first attempt failed) will result in a panic."],["StaticHookWithDefault","A hook with a static lifetime and a default detour closure.This hook can only be constructed using the `static_hooks!` macro. It has the form:Before accessing this hook it is **required** to call `initialize()` **once**. Accessing the hook before initializing or trying to initialize the hook twice (even after the first attempt failed) will result in a panic."]],"type":[["Result","Result type for most functions and methods in this module."]]});